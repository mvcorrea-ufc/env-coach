// src/auto_update/llm_parsers.rs
use serde::Deserialize;
use chrono::Utc;
use crate::config::{BacklogItem, ItemType, Priority, Status};

#[derive(Deserialize, Debug)]
pub struct LlmUserStory {
    pub title: String,
    pub story: String,
    pub priority: String,
    pub effort: u32,
    pub acceptance_criteria: Vec<String>,
}

#[derive(Deserialize, Debug)]
pub struct LlmUserStoryResponse {
    pub user_stories: Vec<LlmUserStory>,
}

/// Converts an LlmUserStory (from LLM JSON) into a BacklogItem.
/// ID is generated by the caller and passed in.
pub fn convert_llm_story_to_backlog_item(llm_story: LlmUserStory, id: String) -> anyhow::Result<BacklogItem> {
    let priority = match llm_story.priority.as_str() {
        "Critical" => Priority::Critical,
        "High" => Priority::High,
        "Medium" => Priority::Medium,
        "Low" => Priority::Low,
        _ => {
            eprintln!("⚠️ Unknown priority value '{}' from LLM for story '{}'. Defaulting to Medium.", llm_story.priority, llm_story.title);
            Priority::Medium
        }
    };

    Ok(BacklogItem {
        id,
        item_type: ItemType::UserStory,
        title: llm_story.title,
        story: llm_story.story,
        acceptance_criteria: llm_story.acceptance_criteria,
        priority,
        effort: llm_story.effort,
        status: Status::Todo,
        created: Utc::now(),
        sprint: None,
        dependencies: Vec::new(),
    })
}
